#! /u/apps/anaconda/2.4/bin/python2 
import Tkinter as tk
import numpy, os
import subprocess as sp

class PWA_GUI(object):
    """
        This program is the PWA_GUI, or main GUI for doing fitting and simulation in PyPWA.
    """
    
    def back1(self):
        self.destrFr1()        
        root.update()
                   

    def back2(self):
        frame3.grid_forget()
        root.update()           

    def fitt(self):    
        frame2.grid(row=0,column=1,sticky="N"+"S"+"E"+"W")
        btnF0.pack(side="top")
        btnF1.pack(side="top")
        btnF2.pack(side="top")
        btnF3.pack(side="top")
        btnF4.pack(side="top")
        btnGF.pack(side="top") 
        #btnB0.pack(side="bottom")
        root.update()

    def mvBAMP1(self):
        frame2.grid(row=0,column=1,sticky="N"+"S"+"E"+"W")
        label=tk.Label(frame2, text="Move waves in,\n or out of Fit?")
        label.pack(side="top", fill="both", padx=10, pady=10)
        btnOut=tk.Button(frame2, text="OUT", height=2 , width = 10,command= lambda: self.mvBAMP2("o"))
        btnOut.pack(side="top")
        btnIn=tk.Button(frame2, text="IN", height=2 , width = 10,command= lambda: self.mvBAMP2("i"))
        btnIn.pack(side="top")
        #btnB0.pack(side="bottom")
        root.update()

    def mvBAMP2(self,direct):
        if "fitting" in os.listdir(os.path.join(os.getcwd().strip("GUI"))):
            for d in os.listdir(os.path.join(os.getcwd().strip("GUI"),"fitting")):
                if "_MeV" in d:
                    bin1 = d
                    break            
            frame3.grid(row=0,column=2,sticky="N"+"S"+"E"+"W")
            wvs = []
            if direct == "o":
                for x in os.listdir(os.path.join(os.getcwd().strip("GUI"),"fitting",bin1,"data")):
                    if ".bamp" in x:
                        wvs.append(x)
            elif direct == "i":
                for x in os.listdir(os.path.join(os.getcwd().strip("GUI"),"fitting","overflow",bin1)):
                    if "data" in x:
                        wvs.append(x.strip("data"))
            x = 0
            t = 0
            for y in range(len(wvs)):
                btn = tk.Button(frame3, text = wvs[y].strip(".bamp"), height=2 , width = 15,command = lambda y=y: self.mvBAMP3(direct,wvs[y].strip(".bamp")))         
                btn.grid(column=x,row=t)
                t += 1
                if t > 9:
                    t = 0
                    x += 1
            btnB1.grid(row=t+1,column=0,sticky="N"+"S"+"E"+"W")

        elif "simulation" in os.listdir(os.path.join(os.getcwd().strip("GUI"))):
            for d in os.listdir(os.path.join(os.getcwd().strip("GUI"),"simulation")):
                if "_MeV" in d:
                    bin1 = d
                    break            
            frame3.grid(row=0,column=2,sticky="N"+"S"+"E"+"W")
            wvs = []
            if direct == "o":
                for x in os.listdir(os.path.join(os.getcwd().strip("GUI"),"simulation",bin1,"flat")):
                    if ".bamp" in x:
                        wvs.append(x)
            elif direct == "i":
                for x in os.listdir(os.path.join(os.getcwd().strip("GUI"),"simulation","overflow",bin1)):
                    if "flat" in x:
                        wvs.append(x.strip("flat"))
            x = 0
            t = 0
            for y in range(len(wvs)):
                btn = tk.Button(frame3, text = wvs[y].strip(".bamp"), height=2 , width = 15,command = lambda y=y: self.mvBAMP3(direct,wvs[y].strip(".bamp")))         
                btn.grid(column=x,row=t)
                t += 1
                if t > 9:
                    t = 0
                    x += 1
            btnB1.grid(row=t+1,column=0,sticky="N"+"S"+"E"+"W")

    def mvBAMP3(self,direct,bamp):
        sp.call([os.path.join(os.getcwd().strip("GUI"),"scripts","mvBAMP_GUI"),str(direct),str(bamp)]) 
      
    def sim(self):
        frame2.grid(row=0,column=1,sticky="N"+"S"+"E"+"W")
        btnS0.pack(side="top")
        btnS1.pack(side="top")
        btnS2.pack(side="top")
        btnS3.pack(side="top")
        btnS4.pack(side="top")
        btnS5.pack(side="top")
        btnGS.pack(side="top") 
        #btnB0.pack(side="bottom")

    def runD(self,prog,FoS):
        if prog == 0:            
            sp.call([os.path.join(os.getcwd().strip("GUI"),"scripts","GUI_gamp_main.py"),str(FoS),"data"]) 
        if prog == 1:
            sp.call([os.path.join(os.getcwd().strip("GUI"),"scripts","GUI_alpha_main.py"),str(FoS),"data"])

    def runF(self,prog,FoS):
        if prog == 0:
            sp.call([os.path.join(os.getcwd().strip("GUI"),"scripts","GUI_gamp_main.py"),str(FoS),"flat"]) 
        if prog == 1:
            sp.call([os.path.join(os.getcwd().strip("GUI"),"scripts","GUI_alpha_main.py"),str(FoS),"flat"])
        if prog == 2:
            sp.call([os.path.join(os.getcwd().strip("GUI"),"scripts","GUI_subPyNormInt.py"),str(FoS),"flat"])

    def runaM(self,prog,FoS):
        if prog == 0:
            sp.call([os.path.join(os.getcwd().strip("GUI"),"scripts","GUI_gamp_main.py"),str(FoS),"mc","acc"]) 
        if prog == 1:
            sp.call([os.path.join(os.getcwd().strip("GUI"),"scripts","GUI_alpha_main.py"),str(FoS),"mc","acc"])
        if prog == 2:
            sp.call([os.path.join(os.getcwd().strip("GUI"),"scripts","GUI_subPyNormInt.py"),str(FoS),"acc"])   

    def runrM(self,prog,FoS):
        if prog == 0:
            sp.call([os.path.join(os.getcwd().strip("GUI"),"scripts","GUI_gamp_main.py"),str(FoS),"mc","raw"])
        if prog == 1:
            sp.call([os.path.join(os.getcwd().strip("GUI"),"scripts","GUI_alpha_main.py"),str(FoS),"mc","raw"]) 
        if prog == 2:
            sp.call([os.path.join(os.getcwd().strip("GUI"),"scripts","GUI_subPyNormInt.py"),str(FoS),"raw"])
        
    def fitt2(self,prog):
        frame3.grid(row=0,column=2,sticky="N"+"S"+"E"+"W")
        if prog != 2:
            btnR0=tk.Button(frame3, text="data", height=2 , width = 10,command= lambda: self.runD(prog,"y"))
        btnR1=tk.Button(frame3, text="accMC", height=2 , width = 10,command= lambda: self.runaM(prog,"y"))
        btnR2=tk.Button(frame3, text="rawMC", height=2 , width = 10,command= lambda: self.runrM(prog,"y"))
        #btnB1.grid(row=3,column=0,sticky="N"+"S"+"E"+"W")
        if prog != 2:    
            btnR0.grid(row=0,column=0,sticky="N"+"S"+"E"+"W")
        btnR1.grid(row=1,column=0,sticky="N"+"S"+"E"+"W")
        btnR2.grid(row=2,column=0,sticky="N"+"S"+"E"+"W")
        root.update()
    
    def sim2(self,prog):
        self.runF(prog,"n")

    def destrFr1(self):
        frame2.destroy()
        
                
PG = PWA_GUI()

root = tk.Tk()
root.wm_title("GUI")

frame=tk.Frame(root, height = 900, width = 900)
frame.grid(row=0,column=0,sticky="N"+"S"+"E"+"W")
frame2=tk.Frame(root)
frame3=tk.Frame(root)
btnB0=tk.Button(frame2, text="back",  height=2 , width = 10,command= lambda: PG.back1())
btnB1=tk.Button(frame3, text="back", height=2 , width = 10,command= lambda: PG.back2())

btnS0=tk.Button(frame2, text="Run Gamp", height=2 , width = 10,command= lambda: PG.sim2(0))
btnS1=tk.Button(frame2, text="Gen Alpha", height=2 , width = 10,command= lambda: PG.sim2(1))
btnS2=tk.Button(frame2, text="normint", height=2 , width = 10,command= lambda: PG.sim2(2))
btnS3=tk.Button(frame2, text="iList", height=2 , width = 10,command= lambda:sp.call([os.getcwd().strip("GUI")+"/scripts/subSimulator","i"]))
btnS4=tk.Button(frame2, text="iMax", height=2 , width = 10,command= lambda: sp.call(os.getcwd().strip("GUI")+"/scripts/getImax.py"))
btnS5=tk.Button(frame2, text="Simulator", height=2 , width = 10,command= lambda: sp.call([os.getcwd().strip("GUI")+"/scripts/subSimulator","s"]))
btnGS=tk.Button(frame2, text="GRAPHIC\nPLOT", height=2 , width = 10, command= lambda: sp.call(os.getcwd()+"/graphicPlotSim"))


btnF0=tk.Button(frame2, text="Run Gamp", height=2 , width = 10,command= lambda: PG.fitt2(0))
btnF1=tk.Button(frame2, text="Gen Alpha", height=2 , width = 10,command= lambda: PG.fitt2(1))
btnF2=tk.Button(frame2, text="normint", height=2 , width = 10,command= lambda: PG.fitt2(2))
btnF3=tk.Button(frame2, text="Fitter", height=2 , width = 10,command= lambda: sp.call(os.getcwd().strip("GUI")+"/scripts/subLikelihood"))
btnF4=tk.Button(frame2, text="nTrue", height=2 , width = 10,command= lambda: sp.call(os.getcwd().strip("GUI")+"/scripts/subWalkNTrue"))
btnGF=tk.Button(frame2, text="GRAPHIC\nPLOT", height=2 , width = 10, command= lambda: sp.call(os.getcwd()+"/graphicPlot"))

btnC=tk.Button(frame, text="PWA\nCONTROLS", height=2 , width = 10, command= lambda: sp.call(os.getcwd()+"/pwa_controls"))
btnC.pack(side="top")

btnF=tk.Button(frame, text="FITTING", height=2 , width = 10, command= lambda: PG.fitt())
btnF.pack(side="top")
btnS=tk.Button(frame, text="SIMULATION", height=2 , width = 10,command= lambda: PG.sim())
btnS.pack(side="top")
btnMB=tk.Button(frame, text="WAVES", height=2 , width = 10,command= lambda: PG.mvBAMP1())
btnMB.pack(side="top")
btnE=tk.Button(frame,text="exit", height=2 , width = 10,command= lambda: root.destroy())
btnE.pack(side="bottom")

root.mainloop()

